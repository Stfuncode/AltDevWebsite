# Azure DevOps Pipeline for AltDev Website Frontend
trigger:
  branches:
    include:
      - main
      - master
  paths:
    exclude:
      - README.md
      - docs/*

variables:
  # Build Variables
  nodeVersion: '20.x'
  buildConfiguration: 'production'

  # Azure Variables
  azureServiceConnectionName: 'AltDevWebsite-ServiceConnection' # Update this to match your service connection name
  webAppName: 'altdevfrontend'
  resourceGroupName: 'AltDevWebsite'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: BuildJob
    displayName: 'Build Next.js App'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'

    # Validate package lock file exists
    - script: |
        if [ ! -f "package-lock.json" ]; then
          echo "##vso[task.logissue type=warning]No package-lock.json found - using npm install instead of npm ci"
          echo "##vso[task.setvariable variable=useNpmCi]false"
        else
          echo "##vso[task.setvariable variable=useNpmCi]true"
        fi
      displayName: 'Validate lock file'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: 'node_modules'
      condition: eq(variables.useNpmCi, 'true')

    - script: |
        if [ "$(useNpmCi)" = "true" ]; then
          npm ci --production=false
        else
          npm install
        fi
      displayName: 'Install dependencies'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - script: |
        npm run lint
      displayName: 'Run ESLint'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      continueOnError: 'true'

    # Verify build script exists
    - script: |
        if ! npm run build --dry-run 2>/dev/null; then
          echo "##vso[task.logissue type=error]Build script not found in package.json"
          exit 1
        fi
      displayName: 'Validate build script'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - script: |
        npm run build
      displayName: 'Build Next.js application'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
      env:
        NODE_ENV: production

    # Verify start script exists
    - script: |
        if ! npm run start --dry-run 2>/dev/null; then
          echo "##vso[task.logissue type=error]Start script not found in package.json"
          exit 1
        fi
      displayName: 'Validate start script'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: PowerShell@2
      displayName: 'Archive application'
      inputs:
        targetType: 'inline'
        script: |
          $exclude = @(
            'node_modules',
            '.git',
            '.next/cache',
            '.env.local',
            '.env.development.local',
            '.env.test.local',
            '.env.production.local',
            '*.md',
            'azure-pipelines.yml',
            '.gitignore',
            '.eslintrc*',
            'jest.config*',
            'cypress*',
            '__tests__',
            'coverage'
          )
          $source = "$(System.DefaultWorkingDirectory)"
          $archive = "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
          $files = Get-ChildItem -Path $source -Recurse | Where-Object {
            $exclude -notcontains $_.Name
          }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($source, $archive)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: 'webapp'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    displayName: 'Deploy to Azure App Service'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'webapp'
              downloadPath: '$(Pipeline.Workspace)'

          - task: ExtractFiles@1
            displayName: 'Extract Files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/webapp/*.zip'
              destinationFolder: '$(Pipeline.Workspace)/webapp-extracted'
              cleanDestinationFolder: true

          # Install production dependencies
          - task: NodeTool@0
            displayName: 'Install Node.js for deployment'
            inputs:
              versionSpec: '$(nodeVersion)'

          - script: |
              cd $(Pipeline.Workspace)/webapp-extracted
              if [ -f "package-lock.json" ]; then
                npm ci --production
              else
                npm install --production
              fi
            displayName: 'Install production dependencies'

          # Verify deployment package
          - script: |
              cd $(Pipeline.Workspace)/webapp-extracted
              echo "=== Deployment Package Contents ==="
              ls -la
              echo "=== Next.js Build Output ==="
              ls -la .next/ || echo "No .next directory found"
              echo "=== Package.json Scripts ==="
              node -p "JSON.stringify(require('./package.json').scripts, null, 2)" || echo "Cannot read package.json"
            displayName: 'Verify deployment package'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure App Service'
            inputs:
              azureSubscription: '$(azureServiceConnectionName)'
              appType: 'webAppLinux'
              appName: '$(webAppName)'
              resourceGroupName: '$(resourceGroupName)'
              package: '$(Pipeline.Workspace)/webapp-extracted'
              runtimeStack: 'NODE|20-lts'
              startUpCommand: 'npm start'
              appSettings: |
                -WEBSITE_NODE_DEFAULT_VERSION "20.x"
                -NODE_ENV "production"
                -WEBSITE_RUN_FROM_PACKAGE "1"
                -NODE_OPTIONS "--max-old-space-size=4096"